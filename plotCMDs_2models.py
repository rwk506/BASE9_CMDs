from pylab import *
from numpy import *
from scipy import *
from matplotlib import *
rcdefaults()
matplotlib.rc('font',family='Bitstream Vera Serif')


################################################################################
####################      CMD plot for all five filters     ####################
################################################################################

def plot_cmds2(f275,f336,f438,f606,f814,modelA,modelB,selectphot=None, ls1='c-', ls2='m-', mark1='.', mark2='k.', ms1=.7, ms2=1.25):
    """
    Plots a grid of all possible CMDs in combinations of five filters and overlplots 2 models.
    Optimized for use with HST filters F275W, F336W, F438W, F606W, and F814W; input is in order of increasing wavelength. Also optimized for models generated by the BASE-9 makeCMD routine.
    
    Inputs:
    f275:        1-D array of magnitudes
    f336:        1-D array of magnitudes
    f438:        1-D array of magnitudes
    f606:        1-D array of magnitudes
    f814:        1-D array of magnitudes
    modelA:      5-D array, each of five dimensions defining an isochrone in one of the five filters
    modelB:      same as modelA for a second model (can set modelB=modelA to plot only one population if desired)
    selectphot:  a 5-D array formatted as [sub275,subf336,subf438,subf606,subf814]; if set to not None (the default), this option will overplot the subsample of photometry.
    ls1:         The linestyle and color of the first isochrone model (default is  a solid cyan line)
    ls2:         The linestyle and color of the second isochrone model (default is a solid magenta line)
    mark1:       The marker type of the entire sample of stars (default is gray points)
    mark2:       The marker type for the subsample of stars (default is  black points)
    ms1:         The marker size in points of the entire sample of stars (default is relatively smaller)
    ms2:         The marker size in points of the subsample of stars (default is relatively larger)
    
    
    
    
    """
    
    modelA275=modelA[:,0];modelA336=modelA[:,1];modelA438=modelA[:,2];modelA606=modelA[:,3];modelA814=modelA[:,4]
    modelB275=modelB[:,0];modelB336=modelB[:,1];modelB438=modelB[:,2];modelB606=modelB[:,3];modelB814=modelB[:,4]
    
    fig = pylab.figure(figsize=(18, 18))#**figprops)       # New figure
    fig.subplots_adjust(wspace=0.3,hspace=0.3)             # Tunes the subplot layout


##### plot the observed data
    cl1='gray'
    data1=[f275,f336,f438,f606,f814]
    axeslabels=['F275W','F336W','F438W','F606W','F814W']

    ### first row: F275W; skip first in row (subplot #1)
    ax2 = fig.add_subplot(5, 5, 2)
    ax3 = fig.add_subplot(5, 5, 3)
    ax4 = fig.add_subplot(5, 5, 4)
    ax5 = fig.add_subplot(5, 5, 5)

    for i,axes in enumerate([ax2,ax3,ax4,ax5]):
        axes.plot(data1[0]-data1[i+1],data1[0],marker=mark1,color=cl1,ms=ms1, lw=0)
        axes.set_ylabel(axeslabels[0])
        axes.set_xlabel(axeslabels[0]+'-'+axeslabels[i+1])


    ### second row: F336W; skip second in row (subplot #7)
    bx1 = fig.add_subplot(5, 5, 6)
    bx3 = fig.add_subplot(5, 5, 8)
    bx4 = fig.add_subplot(5, 5, 9)
    bx5 = fig.add_subplot(5, 5, 10)

    bx1.plot(f275-f336,f336,marker=mark1,color=cl1,ms=ms1, lw=0)
    bx1.set_ylabel('F336W')
    bx1.set_xlabel('F275W-F336W')  

    for i,axes in enumerate([bx3,bx4,bx5]):
        axes.plot(data1[1]-data1[i+2],data1[1],marker=mark1,color=cl1,ms=ms1, lw=0)
        axes.set_ylabel(axeslabels[1])
        axes.set_xlabel(axeslabels[1]+'-'+axeslabels[i+2])

    
    ### third row: F438W; skip third in row (subplot #13)
    cx1 = fig.add_subplot(5, 5, 11)
    cx2 = fig.add_subplot(5, 5, 12)
    cx4 = fig.add_subplot(5, 5, 14)
    cx5 = fig.add_subplot(5, 5, 15)

    for i,axes in enumerate([cx1,cx2]):
        axes.plot(data1[i]-data1[2],data1[2],marker=mark1,color=cl1,ms=ms1, lw=0)
        axes.set_ylabel(axeslabels[2])
        axes.set_xlabel(axeslabels[i]+'-'+axeslabels[2])

    for i,axes in enumerate([cx4,cx5]):
        axes.plot(data1[2]-data1[i+3],data1[2],marker=mark1,color=cl1,ms=ms1, lw=0)
        axes.set_ylabel(axeslabels[2])
        axes.set_xlabel(axeslabels[2]+'-'+axeslabels[i+3])


    ### fourth row: F606W; skip fourth in row (subplot #19)
    dx1 = fig.add_subplot(5, 5, 16)
    dx2 = fig.add_subplot(5, 5, 17)
    dx3 = fig.add_subplot(5, 5, 18)
    dx5 = fig.add_subplot(5, 5, 20)

    for i,axes in enumerate([dx1,dx2,dx3]):
        axes.plot(data1[i]-data1[3],data1[3],marker=mark1,color=cl1,ms=ms1, lw=0)
        axes.set_ylabel(axeslabels[3])
        axes.set_xlabel(axeslabels[i]+'-'+axeslabels[3])

    dx5.plot(f606-f814,f606,marker=mark1,color=cl1,ms=ms1, lw=0)
    dx5.set_ylabel('F606W')
    dx5.set_xlabel('F606W-F814W')
    
    
    ### fifth row: F814W; skip last in row (subplot #25)
    ex1 = fig.add_subplot(5, 5, 21)
    ex2 = fig.add_subplot(5, 5, 22)
    ex3 = fig.add_subplot(5, 5, 23)
    ex4 = fig.add_subplot(5, 5, 24)

    for i,axes in enumerate([ex1,ex2,ex3,ex4]):
        axes.plot(data1[i]-data1[4],data1[4],marker=mark1,color=cl1,ms=ms1, lw=0)
        axes.set_ylabel(axeslabels[4])
        axes.set_xlabel(axeslabels[i]+'-'+axeslabels[4])


##### plot subsample of photometry, if selected
    alp=0.6
    if selectphot!=None:
        ### f275
        for i,axes in enumerate([ax2,ax3,ax4,ax5]):
            axes.plot(selectphot[0]-selectphot[i+1],selectphot[0],mark2,ms=ms2,alpha=alp)
        ### f336
        bx1.plot(selectphot[0]-selectphot[1],selectphot[1],mark2,ms=ms2,alpha=alp)
        for i,axes in enumerate([bx3,bx4,bx5]):
            axes.plot(selectphot[1]-selectphot[i+2],selectphot[1],mark2,ms=ms2,alpha=alp)
        ### f438
        for i,axes in enumerate([cx1,cx2]):
            axes.plot(selectphot[i]-selectphot[2],selectphot[2],mark2,ms=ms2,alpha=alp)
        for i,axes in enumerate([cx4,cx5]):
            axes.plot(selectphot[2]-selectphot[i+3],selectphot[2],mark2,ms=ms2,alpha=alp)
        ### 606
        for i,axes in enumerate([dx1,dx2,dx3]):
            axes.plot(selectphot[i]-selectphot[3],selectphot[3],mark2,ms=ms2,alpha=alp)
        dx5.plot(selectphot[3]-selectphot[4],selectphot[3],mark2,ms=ms2,alpha=alp)
        ### 814
        for i,axes in enumerate([ex1,ex2,ex3,ex4]):
            axes.plot(selectphot[i]-selectphot[4],selectphot[4],mark2,ms=ms2,alpha=alp)


##### plot both models on top of data
    for i,axes in enumerate([ax2,ax3,ax4,ax5]):
        axes.plot(modelA[:,0]-modelA[:,i+1],modelA[:,0],ls1)
        axes.plot(modelB[:,0]-modelB[:,i+1],modelB[:,0],ls2)

    bx1.plot(modelA275-modelA336,modelA336,ls1)
    bx1.plot(modelB275-modelB336,modelB336,ls2)
    for i,axes in enumerate([bx3,bx4,bx5]):
        axes.plot(modelA[:,1]-modelA[:,i+2],modelA[:,1],ls1)
        axes.plot(modelB[:,1]-modelB[:,i+2],modelB[:,1],ls2)

    for i,axes in enumerate([cx1,cx2]):
        axes.plot(modelA[:,i]-modelA[:,2],modelA[:,2],ls1)
        axes.plot(modelB[:,i]-modelB[:,2],modelB[:,2],ls2)
    for i,axes in enumerate([cx4,cx5]):
        axes.plot(modelA[:,2]-modelA[:,i+3],modelA[:,2],ls1)
        axes.plot(modelB[:,2]-modelB[:,i+3],modelB[:,2],ls2)

    for i,axes in enumerate([dx1,dx2,dx3]):
        axes.plot(modelA[:,i]-modelA[:,3],modelA[:,3],ls1)
        axes.plot(modelB[:,i]-modelB[:,3],modelB[:,3],ls2)
    dx5.plot(modelA606-modelA814,modelA606,ls1)
    dx5.plot(modelB606-modelB814,modelB606,ls2)

    for i,axes in enumerate([ex1,ex2,ex3,ex4]):
        axes.plot(modelA[:,i]-modelA[:,4],modelA[:,4],ls1)
        axes.plot(modelB[:,i]-modelB[:,4],modelB[:,4],ls2)


##### remove default offsets for presentation quality
    for axis in [ax2,ax3,ax4,ax5,bx1,bx3,bx4,bx5,cx1,cx2,cx4,cx5,dx1,dx2,dx3,dx5,ex1,ex2,ex3,ex4]:
        axis.get_xaxis().get_major_formatter().set_useOffset(False)
        axis.get_yaxis().get_major_formatter().set_useOffset(False)

##### set y limits for presentation quality
    for axis in [ax2,ax3,ax4,ax5]:
        axis.set_ylim(26,17)
    for axis in [bx1,bx3,bx4,bx5]:
        axis.set_ylim(24,15.5)
    for axis in [cx1,cx2,cx4,cx5]:
        axis.set_ylim(23.5,15)
    for axis in [dx1,dx2,dx3,ex1,ex2,ex3]:
        axis.set_ylim(22.5,12)
    for axis in [dx5,ex4]:
        axis.set_ylim(22.5,12)

##### set x limits for presentation quality
### column 1
    bx1.set_xlim(.5,4)
    cx1.set_xlim(-.25,4)
    dx2.set_xlim(.75,)
    ex2.set_xlim(1,6.5)
### column 2
    ax2.set_xlim(.25,3.25)
    cx2.set_xlim(-.5,2)
    dx2.set_xlim(0,3.5)
    ex2.set_xlim(.5,3.5)
### column 3
    ax3.set_xlim(0,4)
    bx3.set_xlim(-.75,2.25)
    dx3.set_xlim(0,2.5)
    ex3.set_xlim(0.75,3.5)
### column 4
    ax4.set_xlim(.5,5)
    bx4.set_xlim(0,3.25)
    cx4.set_xlim(.5,2.5)
    ex4.set_xlim(.4,1.4)
### column 5
    ax5.set_xlim(1,5.5)
    bx5.set_xlim(.25,4)
    cx5.set_xlim(.75,3.25)
    dx5.set_xlim(.4,1.4)



###### y axis
    if selectphot!=None:
        ### use the whole photometry for the lower limit
        filts_all=[f275,f336,f438,f606,f814]
        ### use the sampled photometry for the upper limit
        filts_samp=[selectphot[0],selectphot[1],selectphot[2],selectphot[3],selectphot[4]]
        ### apply percentile-determined magnitude limits by each row/filter in the grid
        axeslist=[[ax2,ax3,ax4,ax5],[bx1,bx3,bx4,bx5],[cx1,cx2,cx4,cx5],[dx1,dx2,dx3,dx5],[ex1,ex2,ex3,ex4]]
        ### apply to each row
        for j in arange(0,len(filts_all)):
            for i,axs in enumerate(axeslist[j]):
                axs.set_ylim(0.5 * ceil(2.0 * percentile(filts_all[j],99))-0.5, 0.5 * ceil(2.0 * percentile(filts_samp[j],1))-2)
###### x axis
    if selectphot!=None:
        ### now repeat idea for the x-axis
        axeslist=[[bx1,bx1,cx1,dx1,ex1],[ax2,ax2,cx2,dx2,ex2],[ax3,bx3,bx3,dx3,ex3],[ax4,bx4,cx4,cx4,ex4],[ax5,bx5,cx5,dx5,dx5]]
        for j in arange(0,len(filts_all)):
            for i,axs in enumerate(axeslist[j]):
                if i<j:
                    low=0.2*ceil(5.0*percentile(filts_samp[i]-filts_samp[j],1))-0.25
                    high=0.2*ceil(5.0*percentile(filts_samp[i]-filts_samp[j],99))+0.25
                    axs.set_xlim(low,high)
                if i>j:
                    low=0.2*ceil(5.0*percentile(filts_samp[j]-filts_samp[i],1))-0.25
                    high=0.2*ceil(5.0*percentile(filts_samp[j]-filts_samp[i],99))+0.25
                    axs.set_xlim(low,high)

    return


##### example
# F275W,F336W,F438W,F606W,F814W = loadtxt('NGC0288.cleaned.phot',skiprows=1,usecols=(1,2,3,4,5),unpack=True)
# f275w,f336w,f438w,f606w,f814w = loadtxt('NGC0288.sample.phot',skiprows=1, usecols=(1,2,3,4,5),unpack=True)
# model1=loadtxt('NGC0288.v1a.ms',skiprows=1,usecols=(18,19,20,14,17))
# model2=loadtxt('NGC0288.v1b.ms',skiprows=1,usecols=(18,19,20,14,17))
# plot_cmds2(F275W,F336W,F438W,F606W,F814W,model1,model2,selectphot=[f275w,f336w,f438w,f606w,f814w])
# savefig('outputCMD.png')
# plt.show()


